using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to {{dataType}} resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class {{dataType}}Repository : RepositoryBase<{{dataType}}>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public {{dataType}}Repository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("{{dataType}}Repository");
        }

        /// <summary>
        /// Fetches multiple {{dataTypePlural}}
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<{{dataType}}>>>> Fetch{{dataTypePlural}}(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<{{dataType}}>("SELECT * FROM \"{{tableName}}\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<{{dataType}}>>.None);
                    }

                    return Result.Ok(Maybe<List<{{dataType}}>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<{{dataType}}>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple {{dataTypePlural}}
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<{{dataType}}>>>> FetchCounted{{dataTypePlural}}(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"{{tableName}}\"; SELECT * FROM \"{{tableName}}\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<{{dataType}}>().ToList();

                    var paginatedData = new PaginatedResult<{{dataType}}> {
                      Data = data ?? new List<{{dataType}}>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<{{dataType}}>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<{{dataType}}>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single {{dataType}}
        /// </summary>
        /// <param name="resourceId">The id of the {{dataType}} you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<{{dataType}}>>> Fetch{{dataType}}(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<{{dataType}}>("SELECT * FROM \"{{tableName}}\" WHERE {{resourceId}} = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<{{dataType}}>.None);
                    }

                    return Result.Ok(Maybe<{{dataType}}>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<{{dataType}}>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new {{dataType}}
        /// </summary>
        /// <param name="new{{dataType}}">The {{dataType}} to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> Create{{dataType}}({{dataType}} new{{dataType}})
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""{{tableName}}""(
                            {{#each fields}}
                            {{#unless idColumn}}{{dbFieldName}}{{#unless @last}},{{/unless}}{{/unless}}
                            {{/each}}
                        ) VALUES (
                            {{#each fields}}
                            {{#unless idColumn}}@{{fieldName}}{{#unless @last}},{{/unless}}{{/unless}}
                            {{/each}}
                        ) RETURNING {{resourceId}}",
                        new{{dataType}}
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single {{dataType}}
        /// </summary>
        /// <param name="resourceId">The id of the {{dataType}} you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> Drop{{dataType}}(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"{{tableName}}\" WHERE {{resourceId}} = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single {{dataType}} with a new full set of values
        /// </summary>
        /// <param name="replaced{{dataType}}">The new data for the {{dataType}} you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> Replace{{dataType}}({{dataType}} replaced{{dataType}})
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""{{tableName}}""
                        SET
                        {{#each fields}}
                        {{dbFieldName}} = @{{fieldName}}{{#unless @last}},{{/unless}}
                        {{/each}}
                        WHERE {{resourceId}} = @{{dataType}}Id",
                        replaced{{dataType}}
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single {{dataType}} with one or more values
        /// </summary>
        /// <param name="updated{{dataType}}">The new data for the {{dataType}} you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> Update{{dataType}}({{dataType}}Patch updated{{dataType}})
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updated{{dataType}};
                    var operationCount = 0;

                    {{#each fields}}
                    if (obj.{{fieldName}} != null)
                    {
                        sqlPatchOperations.AppendLine(obj.{{fieldName}}.Operation == OperationKind.Remove 
                            ? "{{dbFieldName}} = NULL,"
                            : "{{dbFieldName}} = @{{fieldName}},"
                        );
                        operationCount++;
                    }
                    {{/each}}

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"{{tableName}}\" SET {patchOperations} WHERE {{resourceId}} = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        {{#each fields}}
                        {{fieldName}} = ({{dataType}}) (obj.{{fieldName}} == default ? default : obj.{{fieldName}}.Value){{#unless @last}},{{/unless}}
                        {{/each}}
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
