using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to MenuItem resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class MenuItemRepository : RepositoryBase<MenuItem>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public MenuItemRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("MenuItemRepository");
        }

        /// <summary>
        /// Fetches multiple MenuItems
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<MenuItem>>>> FetchMenuItems(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<MenuItem>("SELECT * FROM \"MenuItem\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<MenuItem>>.None);
                    }

                    return Result.Ok(Maybe<List<MenuItem>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<MenuItem>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple MenuItems
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<MenuItem>>>> FetchCountedMenuItems(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"MenuItem\"; SELECT * FROM \"MenuItem\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<MenuItem>().ToList();

                    var paginatedData = new PaginatedResult<MenuItem> {
                      Data = data ?? new List<MenuItem>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<MenuItem>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<MenuItem>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single MenuItem
        /// </summary>
        /// <param name="resourceId">The id of the MenuItem you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<MenuItem>>> FetchMenuItem(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<MenuItem>("SELECT * FROM \"MenuItem\" WHERE menuItemId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<MenuItem>.None);
                    }

                    return Result.Ok(Maybe<MenuItem>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<MenuItem>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new MenuItem
        /// </summary>
        /// <param name="newMenuItem">The MenuItem to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateMenuItem(MenuItem newMenuItem)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""MenuItem""(
                            venueId,
                            menuId,
                            productId
                        ) VALUES (
                            @VenueId,
                            @MenuId,
                            @ProductId
                        ) RETURNING menuItemId",
                        newMenuItem
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single MenuItem
        /// </summary>
        /// <param name="resourceId">The id of the MenuItem you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropMenuItem(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"MenuItem\" WHERE menuItemId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single MenuItem with a new full set of values
        /// </summary>
        /// <param name="replacedMenuItem">The new data for the MenuItem you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceMenuItem(MenuItem replacedMenuItem)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""MenuItem""
                        SET
                        venueId = @VenueId,
                        menuId = @MenuId,
                        productId = @ProductId
                        WHERE menuItemId = @MenuItemId",
                        replacedMenuItem
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single MenuItem with one or more values
        /// </summary>
        /// <param name="updatedMenuItem">The new data for the MenuItem you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateMenuItem(MenuItemPatch updatedMenuItem)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedMenuItem;
                    var operationCount = 0;

                    if (obj.VenueId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueId.Operation == OperationKind.Remove 
                            ? "venueId = NULL,"
                            : "venueId = @VenueId,"
                        );
                        operationCount++;
                    }
                    if (obj.MenuId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.MenuId.Operation == OperationKind.Remove 
                            ? "menuId = NULL,"
                            : "menuId = @MenuId,"
                        );
                        operationCount++;
                    }
                    if (obj.ProductId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ProductId.Operation == OperationKind.Remove 
                            ? "productId = NULL,"
                            : "productId = @ProductId,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"MenuItem\" SET {patchOperations} WHERE menuItemId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        VenueId = (int) (obj.VenueId == default ? default : obj.VenueId.Value),
                        MenuId = (int) (obj.MenuId == default ? default : obj.MenuId.Value),
                        ProductId = (string) (obj.ProductId == default ? default : obj.ProductId.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
