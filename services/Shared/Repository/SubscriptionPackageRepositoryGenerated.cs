using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to SubscriptionPackage resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class SubscriptionPackageRepository : RepositoryBase<SubscriptionPackage>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public SubscriptionPackageRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("SubscriptionPackageRepository");
        }

        /// <summary>
        /// Fetches multiple SubscriptionPackages
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<SubscriptionPackage>>>> FetchSubscriptionPackages(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<SubscriptionPackage>("SELECT * FROM \"SubscriptionPackage\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<SubscriptionPackage>>.None);
                    }

                    return Result.Ok(Maybe<List<SubscriptionPackage>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<SubscriptionPackage>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple SubscriptionPackages
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<SubscriptionPackage>>>> FetchCountedSubscriptionPackages(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"SubscriptionPackage\"; SELECT * FROM \"SubscriptionPackage\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<SubscriptionPackage>().ToList();

                    var paginatedData = new PaginatedResult<SubscriptionPackage> {
                      Data = data ?? new List<SubscriptionPackage>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<SubscriptionPackage>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<SubscriptionPackage>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single SubscriptionPackage
        /// </summary>
        /// <param name="resourceId">The id of the SubscriptionPackage you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<SubscriptionPackage>>> FetchSubscriptionPackage(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<SubscriptionPackage>("SELECT * FROM \"SubscriptionPackage\" WHERE packageId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<SubscriptionPackage>.None);
                    }

                    return Result.Ok(Maybe<SubscriptionPackage>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<SubscriptionPackage>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new SubscriptionPackage
        /// </summary>
        /// <param name="newSubscriptionPackage">The SubscriptionPackage to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateSubscriptionPackage(SubscriptionPackage newSubscriptionPackage)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""SubscriptionPackage""(
                            
                            packageName,
                            externalPackageId
                        ) VALUES (
                            
                            @PackageName,
                            @ExternalPackageId
                        ) RETURNING packageId",
                        newSubscriptionPackage
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single SubscriptionPackage
        /// </summary>
        /// <param name="resourceId">The id of the SubscriptionPackage you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropSubscriptionPackage(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"SubscriptionPackage\" WHERE packageId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single SubscriptionPackage with a new full set of values
        /// </summary>
        /// <param name="replacedSubscriptionPackage">The new data for the SubscriptionPackage you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceSubscriptionPackage(SubscriptionPackage replacedSubscriptionPackage)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""SubscriptionPackage""
                        SET
                        packageId = @PackageId,
                        packageName = @PackageName,
                        externalPackageId = @ExternalPackageId
                        WHERE packageId = @SubscriptionPackageId",
                        replacedSubscriptionPackage
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single SubscriptionPackage with one or more values
        /// </summary>
        /// <param name="updatedSubscriptionPackage">The new data for the SubscriptionPackage you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateSubscriptionPackage(SubscriptionPackagePatch updatedSubscriptionPackage)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedSubscriptionPackage;
                    var operationCount = 0;

                    if (obj.PackageId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.PackageId.Operation == OperationKind.Remove 
                            ? "packageId = NULL,"
                            : "packageId = @PackageId,"
                        );
                        operationCount++;
                    }
                    if (obj.PackageName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.PackageName.Operation == OperationKind.Remove 
                            ? "packageName = NULL,"
                            : "packageName = @PackageName,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalPackageId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalPackageId.Operation == OperationKind.Remove 
                            ? "externalPackageId = NULL,"
                            : "externalPackageId = @ExternalPackageId,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"SubscriptionPackage\" SET {patchOperations} WHERE packageId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        PackageId = (int) (obj.PackageId == default ? default : obj.PackageId.Value),
                        PackageName = (string) (obj.PackageName == default ? default : obj.PackageName.Value),
                        ExternalPackageId = (string) (obj.ExternalPackageId == default ? default : obj.ExternalPackageId.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
