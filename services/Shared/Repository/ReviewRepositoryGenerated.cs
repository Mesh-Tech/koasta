using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Review resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class ReviewRepository : RepositoryBase<Review>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public ReviewRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("ReviewRepository");
        }

        /// <summary>
        /// Fetches multiple Reviews
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Review>>>> FetchReviews(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Review>("SELECT * FROM \"Review\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Review>>.None);
                    }

                    return Result.Ok(Maybe<List<Review>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Review>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Reviews
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Review>>>> FetchCountedReviews(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"Review\"; SELECT * FROM \"Review\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Review>().ToList();

                    var paginatedData = new PaginatedResult<Review> {
                      Data = data ?? new List<Review>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Review>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Review>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Review
        /// </summary>
        /// <param name="resourceId">The id of the Review you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Review>>> FetchReview(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Review>("SELECT * FROM \"Review\" WHERE reviewId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Review>.None);
                    }

                    return Result.Ok(Maybe<Review>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Review>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Review
        /// </summary>
        /// <param name="newReview">The Review to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateReview(Review newReview)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""Review""(
                            venueId,
                            userId,
                            reviewSummary,
                            reviewDetail,
                            rating,
                            registeredInterest,
                            approved,
                            created,
                            updated
                        ) VALUES (
                            @VenueId,
                            @UserId,
                            @ReviewSummary,
                            @ReviewDetail,
                            @Rating,
                            @RegisteredInterest,
                            @Approved,
                            @Created,
                            @Updated
                        ) RETURNING reviewId",
                        newReview
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Review
        /// </summary>
        /// <param name="resourceId">The id of the Review you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropReview(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"Review\" WHERE reviewId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Review with a new full set of values
        /// </summary>
        /// <param name="replacedReview">The new data for the Review you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceReview(Review replacedReview)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""Review""
                        SET
                        venueId = @VenueId,
                        userId = @UserId,
                        reviewSummary = @ReviewSummary,
                        reviewDetail = @ReviewDetail,
                        rating = @Rating,
                        registeredInterest = @RegisteredInterest,
                        approved = @Approved,
                        created = @Created,
                        updated = @Updated
                        WHERE reviewId = @ReviewId",
                        replacedReview
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Review with one or more values
        /// </summary>
        /// <param name="updatedReview">The new data for the Review you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateReview(ReviewPatch updatedReview)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedReview;
                    var operationCount = 0;

                    if (obj.VenueId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueId.Operation == OperationKind.Remove 
                            ? "venueId = NULL,"
                            : "venueId = @VenueId,"
                        );
                        operationCount++;
                    }
                    if (obj.UserId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.UserId.Operation == OperationKind.Remove 
                            ? "userId = NULL,"
                            : "userId = @UserId,"
                        );
                        operationCount++;
                    }
                    if (obj.ReviewSummary != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ReviewSummary.Operation == OperationKind.Remove 
                            ? "reviewSummary = NULL,"
                            : "reviewSummary = @ReviewSummary,"
                        );
                        operationCount++;
                    }
                    if (obj.ReviewDetail != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ReviewDetail.Operation == OperationKind.Remove 
                            ? "reviewDetail = NULL,"
                            : "reviewDetail = @ReviewDetail,"
                        );
                        operationCount++;
                    }
                    if (obj.Rating != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Rating.Operation == OperationKind.Remove 
                            ? "rating = NULL,"
                            : "rating = @Rating,"
                        );
                        operationCount++;
                    }
                    if (obj.RegisteredInterest != null)
                    {
                        sqlPatchOperations.AppendLine(obj.RegisteredInterest.Operation == OperationKind.Remove 
                            ? "registeredInterest = NULL,"
                            : "registeredInterest = @RegisteredInterest,"
                        );
                        operationCount++;
                    }
                    if (obj.Approved != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Approved.Operation == OperationKind.Remove 
                            ? "approved = NULL,"
                            : "approved = @Approved,"
                        );
                        operationCount++;
                    }
                    if (obj.Created != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Created.Operation == OperationKind.Remove 
                            ? "created = NULL,"
                            : "created = @Created,"
                        );
                        operationCount++;
                    }
                    if (obj.Updated != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Updated.Operation == OperationKind.Remove 
                            ? "updated = NULL,"
                            : "updated = @Updated,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"Review\" SET {patchOperations} WHERE reviewId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        VenueId = (int) (obj.VenueId == default ? default : obj.VenueId.Value),
                        UserId = (int) (obj.UserId == default ? default : obj.UserId.Value),
                        ReviewSummary = (string) (obj.ReviewSummary == default ? default : obj.ReviewSummary.Value),
                        ReviewDetail = (string) (obj.ReviewDetail == default ? default : obj.ReviewDetail.Value),
                        Rating = (int) (obj.Rating == default ? default : obj.Rating.Value),
                        RegisteredInterest = (bool) (obj.RegisteredInterest == default ? default : obj.RegisteredInterest.Value),
                        Approved = (bool) (obj.Approved == default ? default : obj.Approved.Value),
                        Created = (DateTime) (obj.Created == default ? default : obj.Created.Value),
                        Updated = (DateTime) (obj.Updated == default ? default : obj.Updated.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
