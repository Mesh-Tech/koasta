using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to UserSession resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class UserSessionRepository : RepositoryBase<UserSession>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public UserSessionRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("UserSessionRepository");
        }

        /// <summary>
        /// Fetches multiple UserSessions
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<UserSession>>>> FetchUserSessions(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<UserSession>("SELECT * FROM \"UserSession\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<UserSession>>.None);
                    }

                    return Result.Ok(Maybe<List<UserSession>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<UserSession>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple UserSessions
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<UserSession>>>> FetchCountedUserSessions(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"UserSession\"; SELECT * FROM \"UserSession\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<UserSession>().ToList();

                    var paginatedData = new PaginatedResult<UserSession> {
                      Data = data ?? new List<UserSession>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<UserSession>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<UserSession>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single UserSession
        /// </summary>
        /// <param name="resourceId">The id of the UserSession you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<UserSession>>> FetchUserSession(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<UserSession>("SELECT * FROM \"UserSession\" WHERE sessionId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<UserSession>.None);
                    }

                    return Result.Ok(Maybe<UserSession>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<UserSession>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new UserSession
        /// </summary>
        /// <param name="newUserSession">The UserSession to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateUserSession(UserSession newUserSession)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""UserSession""(
                            
                            userId,
                            authToken,
                            type,
                            authTokenExpiry
                        ) VALUES (
                            
                            @UserId,
                            @AuthToken,
                            @TokenType,
                            @AuthTokenExpiry
                        ) RETURNING sessionId",
                        newUserSession
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single UserSession
        /// </summary>
        /// <param name="resourceId">The id of the UserSession you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropUserSession(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"UserSession\" WHERE sessionId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single UserSession with a new full set of values
        /// </summary>
        /// <param name="replacedUserSession">The new data for the UserSession you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceUserSession(UserSession replacedUserSession)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""UserSession""
                        SET
                        sessionId = @SessionId,
                        userId = @UserId,
                        authToken = @AuthToken,
                        type = @TokenType,
                        authTokenExpiry = @AuthTokenExpiry
                        WHERE sessionId = @UserSessionId",
                        replacedUserSession
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single UserSession with one or more values
        /// </summary>
        /// <param name="updatedUserSession">The new data for the UserSession you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateUserSession(UserSessionPatch updatedUserSession)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedUserSession;
                    var operationCount = 0;

                    if (obj.SessionId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.SessionId.Operation == OperationKind.Remove 
                            ? "sessionId = NULL,"
                            : "sessionId = @SessionId,"
                        );
                        operationCount++;
                    }
                    if (obj.UserId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.UserId.Operation == OperationKind.Remove 
                            ? "userId = NULL,"
                            : "userId = @UserId,"
                        );
                        operationCount++;
                    }
                    if (obj.AuthToken != null)
                    {
                        sqlPatchOperations.AppendLine(obj.AuthToken.Operation == OperationKind.Remove 
                            ? "authToken = NULL,"
                            : "authToken = @AuthToken,"
                        );
                        operationCount++;
                    }
                    if (obj.TokenType != null)
                    {
                        sqlPatchOperations.AppendLine(obj.TokenType.Operation == OperationKind.Remove 
                            ? "type = NULL,"
                            : "type = @TokenType,"
                        );
                        operationCount++;
                    }
                    if (obj.AuthTokenExpiry != null)
                    {
                        sqlPatchOperations.AppendLine(obj.AuthTokenExpiry.Operation == OperationKind.Remove 
                            ? "authTokenExpiry = NULL,"
                            : "authTokenExpiry = @AuthTokenExpiry,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"UserSession\" SET {patchOperations} WHERE sessionId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        SessionId = (int) (obj.SessionId == default ? default : obj.SessionId.Value),
                        UserId = (int) (obj.UserId == default ? default : obj.UserId.Value),
                        AuthToken = (string) (obj.AuthToken == default ? default : obj.AuthToken.Value),
                        TokenType = (int) (obj.TokenType == default ? default : obj.TokenType.Value),
                        AuthTokenExpiry = (DateTime) (obj.AuthTokenExpiry == default ? default : obj.AuthTokenExpiry.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
