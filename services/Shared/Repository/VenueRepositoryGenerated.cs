using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Venue resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class VenueRepository : RepositoryBase<Venue>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public VenueRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("VenueRepository");
        }

        /// <summary>
        /// Fetches multiple Venues
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Venue>>>> FetchVenues(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Venue>("SELECT * FROM \"Venue\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Venue>>.None);
                    }

                    return Result.Ok(Maybe<List<Venue>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Venue>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Venues
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Venue>>>> FetchCountedVenues(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"Venue\"; SELECT * FROM \"Venue\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Venue>().ToList();

                    var paginatedData = new PaginatedResult<Venue> {
                      Data = data ?? new List<Venue>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Venue>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Venue>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Venue
        /// </summary>
        /// <param name="resourceId">The id of the Venue you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Venue>>> FetchVenue(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Venue>("SELECT * FROM \"Venue\" WHERE venueId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Venue>.None);
                    }

                    return Result.Ok(Maybe<Venue>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Venue>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Venue
        /// </summary>
        /// <param name="newVenue">The Venue to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateVenue(Venue newVenue)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""Venue""(
                            companyId,
                            venueCode,
                            venueName,
                            venueAddress,
                            venueAddress2,
                            venueAddress3,
                            venueCounty,
                            venuePostCode,
                            venuePhone,
                            venueContact,
                            venueDescription,
                            venueNotes,
                            imageId,
                            venueLatitude,
                            venueLongitude,
                            externalLocationId,
                            verificationStatus,
                            referenceCode,
                            venueProgress,
                            servingType
                        ) VALUES (
                            @CompanyId,
                            @VenueCode,
                            @VenueName,
                            @VenueAddress,
                            @VenueAddress2,
                            @VenueAddress3,
                            @VenueCounty,
                            @VenuePostCode,
                            @VenuePhone,
                            @VenueContact,
                            @VenueDescription,
                            @VenueNotes,
                            @ImageId,
                            @VenueLatitude,
                            @VenueLongitude,
                            @ExternalLocationId,
                            @VerificationStatus,
                            @ReferenceCode,
                            @Progress,
                            @ServingType
                        ) RETURNING venueId",
                        newVenue
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Venue
        /// </summary>
        /// <param name="resourceId">The id of the Venue you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropVenue(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"Venue\" WHERE venueId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Venue with a new full set of values
        /// </summary>
        /// <param name="replacedVenue">The new data for the Venue you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceVenue(Venue replacedVenue)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""Venue""
                        SET
                        companyId = @CompanyId,
                        venueCode = @VenueCode,
                        venueName = @VenueName,
                        venueAddress = @VenueAddress,
                        venueAddress2 = @VenueAddress2,
                        venueAddress3 = @VenueAddress3,
                        venueCounty = @VenueCounty,
                        venuePostCode = @VenuePostCode,
                        venuePhone = @VenuePhone,
                        venueContact = @VenueContact,
                        venueDescription = @VenueDescription,
                        venueNotes = @VenueNotes,
                        imageId = @ImageId,
                        venueLatitude = @VenueLatitude,
                        venueLongitude = @VenueLongitude,
                        externalLocationId = @ExternalLocationId,
                        verificationStatus = @VerificationStatus,
                        referenceCode = @ReferenceCode,
                        venueProgress = @Progress,
                        servingType = @ServingType
                        WHERE venueId = @VenueId",
                        replacedVenue
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Venue with one or more values
        /// </summary>
        /// <param name="updatedVenue">The new data for the Venue you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateVenue(VenuePatch updatedVenue)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedVenue;
                    var operationCount = 0;

                    if (obj.CompanyId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyId.Operation == OperationKind.Remove 
                            ? "companyId = NULL,"
                            : "companyId = @CompanyId,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueCode != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueCode.Operation == OperationKind.Remove 
                            ? "venueCode = NULL,"
                            : "venueCode = @VenueCode,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueName.Operation == OperationKind.Remove 
                            ? "venueName = NULL,"
                            : "venueName = @VenueName,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueAddress != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueAddress.Operation == OperationKind.Remove 
                            ? "venueAddress = NULL,"
                            : "venueAddress = @VenueAddress,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueAddress2 != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueAddress2.Operation == OperationKind.Remove 
                            ? "venueAddress2 = NULL,"
                            : "venueAddress2 = @VenueAddress2,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueAddress3 != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueAddress3.Operation == OperationKind.Remove 
                            ? "venueAddress3 = NULL,"
                            : "venueAddress3 = @VenueAddress3,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueCounty != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueCounty.Operation == OperationKind.Remove 
                            ? "venueCounty = NULL,"
                            : "venueCounty = @VenueCounty,"
                        );
                        operationCount++;
                    }
                    if (obj.VenuePostCode != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenuePostCode.Operation == OperationKind.Remove 
                            ? "venuePostCode = NULL,"
                            : "venuePostCode = @VenuePostCode,"
                        );
                        operationCount++;
                    }
                    if (obj.VenuePhone != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenuePhone.Operation == OperationKind.Remove 
                            ? "venuePhone = NULL,"
                            : "venuePhone = @VenuePhone,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueContact != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueContact.Operation == OperationKind.Remove 
                            ? "venueContact = NULL,"
                            : "venueContact = @VenueContact,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueDescription != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueDescription.Operation == OperationKind.Remove 
                            ? "venueDescription = NULL,"
                            : "venueDescription = @VenueDescription,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueNotes != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueNotes.Operation == OperationKind.Remove 
                            ? "venueNotes = NULL,"
                            : "venueNotes = @VenueNotes,"
                        );
                        operationCount++;
                    }
                    if (obj.ImageId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ImageId.Operation == OperationKind.Remove 
                            ? "imageId = NULL,"
                            : "imageId = @ImageId,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueLatitude != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueLatitude.Operation == OperationKind.Remove 
                            ? "venueLatitude = NULL,"
                            : "venueLatitude = @VenueLatitude,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueLongitude != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueLongitude.Operation == OperationKind.Remove 
                            ? "venueLongitude = NULL,"
                            : "venueLongitude = @VenueLongitude,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalLocationId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalLocationId.Operation == OperationKind.Remove 
                            ? "externalLocationId = NULL,"
                            : "externalLocationId = @ExternalLocationId,"
                        );
                        operationCount++;
                    }
                    if (obj.VerificationStatus != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VerificationStatus.Operation == OperationKind.Remove 
                            ? "verificationStatus = NULL,"
                            : "verificationStatus = @VerificationStatus,"
                        );
                        operationCount++;
                    }
                    if (obj.ReferenceCode != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ReferenceCode.Operation == OperationKind.Remove 
                            ? "referenceCode = NULL,"
                            : "referenceCode = @ReferenceCode,"
                        );
                        operationCount++;
                    }
                    if (obj.Progress != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Progress.Operation == OperationKind.Remove 
                            ? "venueProgress = NULL,"
                            : "venueProgress = @Progress,"
                        );
                        operationCount++;
                    }
                    if (obj.ServingType != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ServingType.Operation == OperationKind.Remove 
                            ? "servingType = NULL,"
                            : "servingType = @ServingType,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"Venue\" SET {patchOperations} WHERE venueId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        CompanyId = (int) (obj.CompanyId == default ? default : obj.CompanyId.Value),
                        VenueCode = (string) (obj.VenueCode == default ? default : obj.VenueCode.Value),
                        VenueName = (string) (obj.VenueName == default ? default : obj.VenueName.Value),
                        VenueAddress = (string) (obj.VenueAddress == default ? default : obj.VenueAddress.Value),
                        VenueAddress2 = (string) (obj.VenueAddress2 == default ? default : obj.VenueAddress2.Value),
                        VenueAddress3 = (string) (obj.VenueAddress3 == default ? default : obj.VenueAddress3.Value),
                        VenueCounty = (string) (obj.VenueCounty == default ? default : obj.VenueCounty.Value),
                        VenuePostCode = (string) (obj.VenuePostCode == default ? default : obj.VenuePostCode.Value),
                        VenuePhone = (string) (obj.VenuePhone == default ? default : obj.VenuePhone.Value),
                        VenueContact = (string) (obj.VenueContact == default ? default : obj.VenueContact.Value),
                        VenueDescription = (string) (obj.VenueDescription == default ? default : obj.VenueDescription.Value),
                        VenueNotes = (string) (obj.VenueNotes == default ? default : obj.VenueNotes.Value),
                        ImageId = (int) (obj.ImageId == default ? default : obj.ImageId.Value),
                        VenueLatitude = (string) (obj.VenueLatitude == default ? default : obj.VenueLatitude.Value),
                        VenueLongitude = (string) (obj.VenueLongitude == default ? default : obj.VenueLongitude.Value),
                        ExternalLocationId = (string) (obj.ExternalLocationId == default ? default : obj.ExternalLocationId.Value),
                        VerificationStatus = (int) (obj.VerificationStatus == default ? default : obj.VerificationStatus.Value),
                        ReferenceCode = (string) (obj.ReferenceCode == default ? default : obj.ReferenceCode.Value),
                        Progress = (int) (obj.Progress == default ? default : obj.Progress.Value),
                        ServingType = (int) (obj.ServingType == default ? default : obj.ServingType.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
