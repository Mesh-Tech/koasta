using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Employee resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class EmployeeRepository : RepositoryBase<Employee>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public EmployeeRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("EmployeeRepository");
        }

        /// <summary>
        /// Fetches multiple Employees
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Employee>>>> FetchEmployees(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Employee>("SELECT * FROM \"Employee\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Employee>>.None);
                    }

                    return Result.Ok(Maybe<List<Employee>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Employee>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Employees
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Employee>>>> FetchCountedEmployees(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"Employee\"; SELECT * FROM \"Employee\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Employee>().ToList();

                    var paginatedData = new PaginatedResult<Employee> {
                      Data = data ?? new List<Employee>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Employee>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Employee>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Employee
        /// </summary>
        /// <param name="resourceId">The id of the Employee you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Employee>>> FetchEmployee(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Employee>("SELECT * FROM \"Employee\" WHERE employeeId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Employee>.None);
                    }

                    return Result.Ok(Maybe<Employee>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Employee>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Employee
        /// </summary>
        /// <param name="newEmployee">The Employee to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateEmployee(Employee newEmployee)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""Employee""(
                            employeeName,
                            username,
                            passwordHash,
                            companyId,
                            venueId,
                            roleId,
                            securityStamp,
                            confirmed
                        ) VALUES (
                            @EmployeeName,
                            @Username,
                            @PasswordHash,
                            @CompanyId,
                            @VenueId,
                            @RoleId,
                            @SecurityStamp,
                            @Confirmed
                        ) RETURNING employeeId",
                        newEmployee
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Employee
        /// </summary>
        /// <param name="resourceId">The id of the Employee you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropEmployee(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"Employee\" WHERE employeeId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Employee with a new full set of values
        /// </summary>
        /// <param name="replacedEmployee">The new data for the Employee you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceEmployee(Employee replacedEmployee)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""Employee""
                        SET
                        employeeName = @EmployeeName,
                        username = @Username,
                        passwordHash = @PasswordHash,
                        companyId = @CompanyId,
                        venueId = @VenueId,
                        roleId = @RoleId,
                        securityStamp = @SecurityStamp,
                        confirmed = @Confirmed
                        WHERE employeeId = @EmployeeId",
                        replacedEmployee
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Employee with one or more values
        /// </summary>
        /// <param name="updatedEmployee">The new data for the Employee you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateEmployee(EmployeePatch updatedEmployee)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedEmployee;
                    var operationCount = 0;

                    if (obj.EmployeeName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.EmployeeName.Operation == OperationKind.Remove 
                            ? "employeeName = NULL,"
                            : "employeeName = @EmployeeName,"
                        );
                        operationCount++;
                    }
                    if (obj.Username != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Username.Operation == OperationKind.Remove 
                            ? "username = NULL,"
                            : "username = @Username,"
                        );
                        operationCount++;
                    }
                    if (obj.PasswordHash != null)
                    {
                        sqlPatchOperations.AppendLine(obj.PasswordHash.Operation == OperationKind.Remove 
                            ? "passwordHash = NULL,"
                            : "passwordHash = @PasswordHash,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyId.Operation == OperationKind.Remove 
                            ? "companyId = NULL,"
                            : "companyId = @CompanyId,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueId.Operation == OperationKind.Remove 
                            ? "venueId = NULL,"
                            : "venueId = @VenueId,"
                        );
                        operationCount++;
                    }
                    if (obj.RoleId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.RoleId.Operation == OperationKind.Remove 
                            ? "roleId = NULL,"
                            : "roleId = @RoleId,"
                        );
                        operationCount++;
                    }
                    if (obj.SecurityStamp != null)
                    {
                        sqlPatchOperations.AppendLine(obj.SecurityStamp.Operation == OperationKind.Remove 
                            ? "securityStamp = NULL,"
                            : "securityStamp = @SecurityStamp,"
                        );
                        operationCount++;
                    }
                    if (obj.Confirmed != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Confirmed.Operation == OperationKind.Remove 
                            ? "confirmed = NULL,"
                            : "confirmed = @Confirmed,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"Employee\" SET {patchOperations} WHERE employeeId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        EmployeeName = (string) (obj.EmployeeName == default ? default : obj.EmployeeName.Value),
                        Username = (string) (obj.Username == default ? default : obj.Username.Value),
                        PasswordHash = (string) (obj.PasswordHash == default ? default : obj.PasswordHash.Value),
                        CompanyId = (int) (obj.CompanyId == default ? default : obj.CompanyId.Value),
                        VenueId = (int) (obj.VenueId == default ? default : obj.VenueId.Value),
                        RoleId = (int) (obj.RoleId == default ? default : obj.RoleId.Value),
                        SecurityStamp = (string) (obj.SecurityStamp == default ? default : obj.SecurityStamp.Value),
                        Confirmed = (bool) (obj.Confirmed == default ? default : obj.Confirmed.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
