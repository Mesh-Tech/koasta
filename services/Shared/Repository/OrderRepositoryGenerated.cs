using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Order resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class OrderRepository : RepositoryBase<Order>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public OrderRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("OrderRepository");
        }

        /// <summary>
        /// Fetches multiple Orders
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Order>>>> FetchOrders(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Order>("SELECT * FROM \"CustomerOrder\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Order>>.None);
                    }

                    return Result.Ok(Maybe<List<Order>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Order>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Orders
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Order>>>> FetchCountedOrders(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"CustomerOrder\"; SELECT * FROM \"CustomerOrder\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Order>().ToList();

                    var paginatedData = new PaginatedResult<Order> {
                      Data = data ?? new List<Order>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Order>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Order>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Order
        /// </summary>
        /// <param name="resourceId">The id of the Order you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Order>>> FetchOrder(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Order>("SELECT * FROM \"CustomerOrder\" WHERE orderId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Order>.None);
                    }

                    return Result.Ok(Maybe<Order>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Order>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Order
        /// </summary>
        /// <param name="newOrder">The Order to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateOrder(Order newOrder)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""CustomerOrder""(
                            orderNumber,
                            userId,
                            venueId,
                            orderStatus,
                            employeeId,
                            orderTimeStamp,
                            externalPaymentId,
                            total,
                            serviceCharge,
                            nonce,
                            orderNotes,
                            servingType,
                            tableName
                        ) VALUES (
                            @OrderNumber,
                            @UserId,
                            @VenueId,
                            @OrderStatus,
                            @EmployeeId,
                            @OrderTimeStamp,
                            @ExternalPaymentId,
                            @Total,
                            @ServiceCharge,
                            @Nonce,
                            @OrderNotes,
                            @ServingType,
                            @Table
                        ) RETURNING orderId",
                        newOrder
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Order
        /// </summary>
        /// <param name="resourceId">The id of the Order you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropOrder(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"CustomerOrder\" WHERE orderId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Order with a new full set of values
        /// </summary>
        /// <param name="replacedOrder">The new data for the Order you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceOrder(Order replacedOrder)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""CustomerOrder""
                        SET
                        orderNumber = @OrderNumber,
                        userId = @UserId,
                        venueId = @VenueId,
                        orderStatus = @OrderStatus,
                        employeeId = @EmployeeId,
                        orderTimeStamp = @OrderTimeStamp,
                        externalPaymentId = @ExternalPaymentId,
                        total = @Total,
                        serviceCharge = @ServiceCharge,
                        nonce = @Nonce,
                        orderNotes = @OrderNotes,
                        servingType = @ServingType,
                        tableName = @Table
                        WHERE orderId = @OrderId",
                        replacedOrder
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Order with one or more values
        /// </summary>
        /// <param name="updatedOrder">The new data for the Order you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateOrder(OrderPatch updatedOrder)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedOrder;
                    var operationCount = 0;

                    if (obj.OrderNumber != null)
                    {
                        sqlPatchOperations.AppendLine(obj.OrderNumber.Operation == OperationKind.Remove 
                            ? "orderNumber = NULL,"
                            : "orderNumber = @OrderNumber,"
                        );
                        operationCount++;
                    }
                    if (obj.UserId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.UserId.Operation == OperationKind.Remove 
                            ? "userId = NULL,"
                            : "userId = @UserId,"
                        );
                        operationCount++;
                    }
                    if (obj.VenueId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.VenueId.Operation == OperationKind.Remove 
                            ? "venueId = NULL,"
                            : "venueId = @VenueId,"
                        );
                        operationCount++;
                    }
                    if (obj.OrderStatus != null)
                    {
                        sqlPatchOperations.AppendLine(obj.OrderStatus.Operation == OperationKind.Remove 
                            ? "orderStatus = NULL,"
                            : "orderStatus = @OrderStatus,"
                        );
                        operationCount++;
                    }
                    if (obj.EmployeeId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.EmployeeId.Operation == OperationKind.Remove 
                            ? "employeeId = NULL,"
                            : "employeeId = @EmployeeId,"
                        );
                        operationCount++;
                    }
                    if (obj.OrderTimeStamp != null)
                    {
                        sqlPatchOperations.AppendLine(obj.OrderTimeStamp.Operation == OperationKind.Remove 
                            ? "orderTimeStamp = NULL,"
                            : "orderTimeStamp = @OrderTimeStamp,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalPaymentId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalPaymentId.Operation == OperationKind.Remove 
                            ? "externalPaymentId = NULL,"
                            : "externalPaymentId = @ExternalPaymentId,"
                        );
                        operationCount++;
                    }
                    if (obj.Total != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Total.Operation == OperationKind.Remove 
                            ? "total = NULL,"
                            : "total = @Total,"
                        );
                        operationCount++;
                    }
                    if (obj.ServiceCharge != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ServiceCharge.Operation == OperationKind.Remove 
                            ? "serviceCharge = NULL,"
                            : "serviceCharge = @ServiceCharge,"
                        );
                        operationCount++;
                    }
                    if (obj.Nonce != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Nonce.Operation == OperationKind.Remove 
                            ? "nonce = NULL,"
                            : "nonce = @Nonce,"
                        );
                        operationCount++;
                    }
                    if (obj.OrderNotes != null)
                    {
                        sqlPatchOperations.AppendLine(obj.OrderNotes.Operation == OperationKind.Remove 
                            ? "orderNotes = NULL,"
                            : "orderNotes = @OrderNotes,"
                        );
                        operationCount++;
                    }
                    if (obj.ServingType != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ServingType.Operation == OperationKind.Remove 
                            ? "servingType = NULL,"
                            : "servingType = @ServingType,"
                        );
                        operationCount++;
                    }
                    if (obj.Table != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Table.Operation == OperationKind.Remove 
                            ? "tableName = NULL,"
                            : "tableName = @Table,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"CustomerOrder\" SET {patchOperations} WHERE orderId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        OrderNumber = (int) (obj.OrderNumber == default ? default : obj.OrderNumber.Value),
                        UserId = (int) (obj.UserId == default ? default : obj.UserId.Value),
                        VenueId = (int) (obj.VenueId == default ? default : obj.VenueId.Value),
                        OrderStatus = (int) (obj.OrderStatus == default ? default : obj.OrderStatus.Value),
                        EmployeeId = (int) (obj.EmployeeId == default ? default : obj.EmployeeId.Value),
                        OrderTimeStamp = (DateTime) (obj.OrderTimeStamp == default ? default : obj.OrderTimeStamp.Value),
                        ExternalPaymentId = (string) (obj.ExternalPaymentId == default ? default : obj.ExternalPaymentId.Value),
                        Total = (decimal) (obj.Total == default ? default : obj.Total.Value),
                        ServiceCharge = (decimal) (obj.ServiceCharge == default ? default : obj.ServiceCharge.Value),
                        Nonce = (string) (obj.Nonce == default ? default : obj.Nonce.Value),
                        OrderNotes = (string) (obj.OrderNotes == default ? default : obj.OrderNotes.Value),
                        ServingType = (int) (obj.ServingType == default ? default : obj.ServingType.Value),
                        Table = (string) (obj.Table == default ? default : obj.Table.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
