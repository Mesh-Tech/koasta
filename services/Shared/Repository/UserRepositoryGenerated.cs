using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to User resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class UserRepository : RepositoryBase<User>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public UserRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("UserRepository");
        }

        /// <summary>
        /// Fetches multiple Users
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<User>>>> FetchUsers(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<User>("SELECT * FROM \"User\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<User>>.None);
                    }

                    return Result.Ok(Maybe<List<User>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<User>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Users
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<User>>>> FetchCountedUsers(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"User\"; SELECT * FROM \"User\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<User>().ToList();

                    var paginatedData = new PaginatedResult<User> {
                      Data = data ?? new List<User>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<User>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<User>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single User
        /// </summary>
        /// <param name="resourceId">The id of the User you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<User>>> FetchUser(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<User>("SELECT * FROM \"User\" WHERE userId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<User>.None);
                    }

                    return Result.Ok(Maybe<User>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<User>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new User
        /// </summary>
        /// <param name="newUser">The User to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateUser(User newUser)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""User""(
                            registrationId,
                            firstName,
                            lastName,
                            email,
                            dob,
                            isVerified,
                            wantAdvertising,
                            externalPaymentProcessorId,
                            appleUserIdentifier,
                            facebookUserIdentifier,
                            googleUserIdentifier
                        ) VALUES (
                            @RegistrationId,
                            @FirstName,
                            @LastName,
                            @Email,
                            @Dob,
                            @IsVerified,
                            @WantAdvertising,
                            @ExternalPaymentProcessorId,
                            @AppleUserIdentifier,
                            @FacebookUserIdentifier,
                            @GoogleUserIdentifier
                        ) RETURNING userId",
                        newUser
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single User
        /// </summary>
        /// <param name="resourceId">The id of the User you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropUser(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"User\" WHERE userId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single User with a new full set of values
        /// </summary>
        /// <param name="replacedUser">The new data for the User you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceUser(User replacedUser)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""User""
                        SET
                        registrationId = @RegistrationId,
                        firstName = @FirstName,
                        lastName = @LastName,
                        email = @Email,
                        dob = @Dob,
                        isVerified = @IsVerified,
                        wantAdvertising = @WantAdvertising,
                        externalPaymentProcessorId = @ExternalPaymentProcessorId,
                        appleUserIdentifier = @AppleUserIdentifier,
                        facebookUserIdentifier = @FacebookUserIdentifier,
                        googleUserIdentifier = @GoogleUserIdentifier
                        WHERE userId = @UserId",
                        replacedUser
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single User with one or more values
        /// </summary>
        /// <param name="updatedUser">The new data for the User you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateUser(UserPatch updatedUser)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedUser;
                    var operationCount = 0;

                    if (obj.RegistrationId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.RegistrationId.Operation == OperationKind.Remove 
                            ? "registrationId = NULL,"
                            : "registrationId = @RegistrationId,"
                        );
                        operationCount++;
                    }
                    if (obj.FirstName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.FirstName.Operation == OperationKind.Remove 
                            ? "firstName = NULL,"
                            : "firstName = @FirstName,"
                        );
                        operationCount++;
                    }
                    if (obj.LastName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.LastName.Operation == OperationKind.Remove 
                            ? "lastName = NULL,"
                            : "lastName = @LastName,"
                        );
                        operationCount++;
                    }
                    if (obj.Email != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Email.Operation == OperationKind.Remove 
                            ? "email = NULL,"
                            : "email = @Email,"
                        );
                        operationCount++;
                    }
                    if (obj.Dob != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Dob.Operation == OperationKind.Remove 
                            ? "dob = NULL,"
                            : "dob = @Dob,"
                        );
                        operationCount++;
                    }
                    if (obj.IsVerified != null)
                    {
                        sqlPatchOperations.AppendLine(obj.IsVerified.Operation == OperationKind.Remove 
                            ? "isVerified = NULL,"
                            : "isVerified = @IsVerified,"
                        );
                        operationCount++;
                    }
                    if (obj.WantAdvertising != null)
                    {
                        sqlPatchOperations.AppendLine(obj.WantAdvertising.Operation == OperationKind.Remove 
                            ? "wantAdvertising = NULL,"
                            : "wantAdvertising = @WantAdvertising,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalPaymentProcessorId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalPaymentProcessorId.Operation == OperationKind.Remove 
                            ? "externalPaymentProcessorId = NULL,"
                            : "externalPaymentProcessorId = @ExternalPaymentProcessorId,"
                        );
                        operationCount++;
                    }
                    if (obj.AppleUserIdentifier != null)
                    {
                        sqlPatchOperations.AppendLine(obj.AppleUserIdentifier.Operation == OperationKind.Remove 
                            ? "appleUserIdentifier = NULL,"
                            : "appleUserIdentifier = @AppleUserIdentifier,"
                        );
                        operationCount++;
                    }
                    if (obj.FacebookUserIdentifier != null)
                    {
                        sqlPatchOperations.AppendLine(obj.FacebookUserIdentifier.Operation == OperationKind.Remove 
                            ? "facebookUserIdentifier = NULL,"
                            : "facebookUserIdentifier = @FacebookUserIdentifier,"
                        );
                        operationCount++;
                    }
                    if (obj.GoogleUserIdentifier != null)
                    {
                        sqlPatchOperations.AppendLine(obj.GoogleUserIdentifier.Operation == OperationKind.Remove 
                            ? "googleUserIdentifier = NULL,"
                            : "googleUserIdentifier = @GoogleUserIdentifier,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"User\" SET {patchOperations} WHERE userId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        RegistrationId = (string) (obj.RegistrationId == default ? default : obj.RegistrationId.Value),
                        FirstName = (string) (obj.FirstName == default ? default : obj.FirstName.Value),
                        LastName = (string) (obj.LastName == default ? default : obj.LastName.Value),
                        Email = (string) (obj.Email == default ? default : obj.Email.Value),
                        Dob = (string) (obj.Dob == default ? default : obj.Dob.Value),
                        IsVerified = (bool) (obj.IsVerified == default ? default : obj.IsVerified.Value),
                        WantAdvertising = (bool) (obj.WantAdvertising == default ? default : obj.WantAdvertising.Value),
                        ExternalPaymentProcessorId = (string) (obj.ExternalPaymentProcessorId == default ? default : obj.ExternalPaymentProcessorId.Value),
                        AppleUserIdentifier = (string) (obj.AppleUserIdentifier == default ? default : obj.AppleUserIdentifier.Value),
                        FacebookUserIdentifier = (string) (obj.FacebookUserIdentifier == default ? default : obj.FacebookUserIdentifier.Value),
                        GoogleUserIdentifier = (string) (obj.GoogleUserIdentifier == default ? default : obj.GoogleUserIdentifier.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
