using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Device resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class DeviceRepository : RepositoryBase<Device>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public DeviceRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("DeviceRepository");
        }

        /// <summary>
        /// Fetches multiple Devices
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Device>>>> FetchDevices(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Device>("SELECT * FROM \"UserDevice\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Device>>.None);
                    }

                    return Result.Ok(Maybe<List<Device>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Device>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Devices
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Device>>>> FetchCountedDevices(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"UserDevice\"; SELECT * FROM \"UserDevice\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Device>().ToList();

                    var paginatedData = new PaginatedResult<Device> {
                      Data = data ?? new List<Device>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Device>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Device>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Device
        /// </summary>
        /// <param name="resourceId">The id of the Device you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Device>>> FetchDevice(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Device>("SELECT * FROM \"UserDevice\" WHERE deviceId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Device>.None);
                    }

                    return Result.Ok(Maybe<Device>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Device>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Device
        /// </summary>
        /// <param name="newDevice">The Device to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateDevice(Device newDevice)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""UserDevice""(
                            userId,
                            deviceToken,
                            platform,
                            updated
                        ) VALUES (
                            @UserId,
                            @Token,
                            @Platform,
                            @UpdateTimestamp
                        ) RETURNING deviceId",
                        newDevice
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Device
        /// </summary>
        /// <param name="resourceId">The id of the Device you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropDevice(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"UserDevice\" WHERE deviceId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Device with a new full set of values
        /// </summary>
        /// <param name="replacedDevice">The new data for the Device you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceDevice(Device replacedDevice)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""UserDevice""
                        SET
                        userId = @UserId,
                        deviceToken = @Token,
                        platform = @Platform,
                        updated = @UpdateTimestamp
                        WHERE deviceId = @DeviceId",
                        replacedDevice
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Device with one or more values
        /// </summary>
        /// <param name="updatedDevice">The new data for the Device you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateDevice(DevicePatch updatedDevice)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedDevice;
                    var operationCount = 0;

                    if (obj.UserId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.UserId.Operation == OperationKind.Remove 
                            ? "userId = NULL,"
                            : "userId = @UserId,"
                        );
                        operationCount++;
                    }
                    if (obj.Token != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Token.Operation == OperationKind.Remove 
                            ? "deviceToken = NULL,"
                            : "deviceToken = @Token,"
                        );
                        operationCount++;
                    }
                    if (obj.Platform != null)
                    {
                        sqlPatchOperations.AppendLine(obj.Platform.Operation == OperationKind.Remove 
                            ? "platform = NULL,"
                            : "platform = @Platform,"
                        );
                        operationCount++;
                    }
                    if (obj.UpdateTimestamp != null)
                    {
                        sqlPatchOperations.AppendLine(obj.UpdateTimestamp.Operation == OperationKind.Remove 
                            ? "updated = NULL,"
                            : "updated = @UpdateTimestamp,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"UserDevice\" SET {patchOperations} WHERE deviceId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        UserId = (int) (obj.UserId == default ? default : obj.UserId.Value),
                        Token = (string) (obj.Token == default ? default : obj.Token.Value),
                        Platform = (int) (obj.Platform == default ? default : obj.Platform.Value),
                        UpdateTimestamp = (DateTime) (obj.UpdateTimestamp == default ? default : obj.UpdateTimestamp.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
