using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Models;
using Koasta.Shared.Types;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Document resources.
    */
    public partial class DocumentRepository : RepositoryBase<Document>
    {
        /// <summary>
        /// Fetches multiple Documents
        /// </summary>
        /// <param name="companyId">The company id to query against</param>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Document>>>> FetchCountedCompanyDocuments(int companyId, int page, int count)
        {
            try
            {
                using var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString);
                using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"Document\" WHERE companyId = @CompanyId; SELECT * FROM \"Document\" WHERE companyId = @CompanyId LIMIT @Limit OFFSET @Offset", new { CompanyId = companyId, Limit = count, Offset = page * count }).ConfigureAwait(false);
                var totalCount = obj.Read<int>().Single();
                var data = obj.Read<Document>().ToList();

                var paginatedData = new PaginatedResult<Document>
                {
                    Data = data ?? new List<Document>(),
                    Count = totalCount
                };

                return Result.Ok(Maybe<PaginatedResult<Document>>.From(paginatedData));
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Document>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Documents
        /// </summary>
        /// <param name="companyId">The company id to query against</param>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Document>>>> FetchCompanyDocuments(int companyId, int page, int count)
        {
            try
            {
                using var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString);
                var data = (await con.QueryAsync<Document>("SELECT * FROM \"Document\" WHERE companyId = @CompanyId LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count, CompanyId = companyId }).ConfigureAwait(false)).ToList();
                if (data == null)
                {
                    return Result.Ok(Maybe<List<Document>>.None);
                }

                return Result.Ok(Maybe<List<Document>>.From(data));
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Document>>>(ex.ToString());
            }
        }
    }
}
