using System;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Configuration;
using Koasta.Shared.Models;
using Koasta.Shared.PatchModels;
using Koasta.Shared.Types;
using System.Text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to Company resources.
    */
    [CompilerGeneratedAttribute()]
    public partial class CompanyRepository : RepositoryBase<Company>
    {
        private readonly ISettings settings;
        private readonly ILogger logger;

        public CompanyRepository(ISettings settings, ILoggerFactory logger) : base()
        {
            this.settings = settings;
            this.logger = logger.CreateLogger("CompanyRepository");
        }

        /// <summary>
        /// Fetches multiple Companies
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<List<Company>>>> FetchCompanies(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Company>("SELECT * FROM \"Company\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false)).ToList();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<List<Company>>.None);
                    }

                    return Result.Ok(Maybe<List<Company>>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<List<Company>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches multiple Companies
        /// </summary>
        /// <param name="page">The current page number</param>
        /// <param name="count">The page size</param>
        /// <returns>Returns a result containing an optional list of items</returns>
        public async Task<Result<Maybe<PaginatedResult<Company>>>> FetchCountedCompanies(int page, int count)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    using var obj = await con.QueryMultipleAsync("SELECT COUNT(*) FROM \"Company\"; SELECT * FROM \"Company\" LIMIT @Limit OFFSET @Offset", new { Limit = count, Offset = page * count }).ConfigureAwait(false);
                    var totalCount = obj.Read<int>().Single();
                    var data = obj.Read<Company>().ToList();

                    var paginatedData = new PaginatedResult<Company> {
                      Data = data ?? new List<Company>(),
                      Count = totalCount
                    };

                    return Result.Ok(Maybe<PaginatedResult<Company>>.From(paginatedData));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<PaginatedResult<Company>>>(ex.ToString());
            }
        }

        /// <summary>
        /// Fetches a single Company
        /// </summary>
        /// <param name="resourceId">The id of the Company you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<Company>>> FetchCompany(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<Company>("SELECT * FROM \"Company\" WHERE companyId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false)).FirstOrDefault();
                    if (data == null)
                    {
                        return Result.Ok(Maybe<Company>.None);
                    }

                    return Result.Ok(Maybe<Company>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<Company>>(ex.ToString());
            }
        }

        /// <summary>
        /// Inserts a new Company
        /// </summary>
        /// <param name="newCompany">The Company to be inserted</param>
        /// <returns>Returns a result containing the created resource id</returns>
        public async Task<Result<Maybe<int>>> CreateCompany(Company newCompany)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var data = (await con.QueryAsync<int>(
                        @"INSERT INTO ""Company""(
                            companyName,
                            companyAddress,
                            companyPostcode,
                            companyContact,
                            companyPhone,
                            companyEmail,
                            externalAccountId,
                            externalCustomerId,
                            externalAccessToken,
                            externalRefreshToken,
                            externalTokenExpiry,
                            referenceCode
                        ) VALUES (
                            @CompanyName,
                            @CompanyAddress,
                            @CompanyPostcode,
                            @CompanyContact,
                            @CompanyPhone,
                            @CompanyEmail,
                            @ExternalAccountId,
                            @ExternalCustomerId,
                            @ExternalAccessToken,
                            @ExternalRefreshToken,
                            @ExternalTokenExpiry,
                            @ReferenceCode
                        ) RETURNING companyId",
                        newCompany
                    ).ConfigureAwait(false)).FirstOrDefault();
                    if (data < 1)
                    {
                        return Result.Ok(Maybe<int>.None);
                    }

                    return Result.Ok(Maybe<int>.From(data));
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail<Maybe<int>>(ex.ToString());
            }
        }

        /// <summary>
        /// Deletes a single Company
        /// </summary>
        /// <param name="resourceId">The id of the Company you wish to delete</param>
        /// <returns>Returns a result indicating if the delete succeeded</returns>
        public async Task<Result> DropCompany(int resourceId)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync("DELETE FROM \"Company\" WHERE companyId = @ResourceId", new { ResourceId = resourceId }).ConfigureAwait(false);
                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Replaces a single Company with a new full set of values
        /// </summary>
        /// <param name="replacedCompany">The new data for the Company you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> ReplaceCompany(Company replacedCompany)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    await con.ExecuteAsync(
                        @"UPDATE ""Company""
                        SET
                        companyName = @CompanyName,
                        companyAddress = @CompanyAddress,
                        companyPostcode = @CompanyPostcode,
                        companyContact = @CompanyContact,
                        companyPhone = @CompanyPhone,
                        companyEmail = @CompanyEmail,
                        externalAccountId = @ExternalAccountId,
                        externalCustomerId = @ExternalCustomerId,
                        externalAccessToken = @ExternalAccessToken,
                        externalRefreshToken = @ExternalRefreshToken,
                        externalTokenExpiry = @ExternalTokenExpiry,
                        referenceCode = @ReferenceCode
                        WHERE companyId = @CompanyId",
                        replacedCompany
                    ).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }

        /// <summary>
        /// Updates a single Company with one or more values
        /// </summary>
        /// <param name="updatedCompany">The new data for the Company you wish to update</param>
        /// <returns>Returns a result indicating if the operation succeeded</returns>
        public async Task<Result> UpdateCompany(CompanyPatch updatedCompany)
        {
            try
            {
                using (var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString))
                {
                    var sqlPatchOperations = new StringBuilder();
                    var obj = updatedCompany;
                    var operationCount = 0;

                    if (obj.CompanyName != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyName.Operation == OperationKind.Remove 
                            ? "companyName = NULL,"
                            : "companyName = @CompanyName,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyAddress != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyAddress.Operation == OperationKind.Remove 
                            ? "companyAddress = NULL,"
                            : "companyAddress = @CompanyAddress,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyPostcode != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyPostcode.Operation == OperationKind.Remove 
                            ? "companyPostcode = NULL,"
                            : "companyPostcode = @CompanyPostcode,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyContact != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyContact.Operation == OperationKind.Remove 
                            ? "companyContact = NULL,"
                            : "companyContact = @CompanyContact,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyPhone != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyPhone.Operation == OperationKind.Remove 
                            ? "companyPhone = NULL,"
                            : "companyPhone = @CompanyPhone,"
                        );
                        operationCount++;
                    }
                    if (obj.CompanyEmail != null)
                    {
                        sqlPatchOperations.AppendLine(obj.CompanyEmail.Operation == OperationKind.Remove 
                            ? "companyEmail = NULL,"
                            : "companyEmail = @CompanyEmail,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalAccountId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalAccountId.Operation == OperationKind.Remove 
                            ? "externalAccountId = NULL,"
                            : "externalAccountId = @ExternalAccountId,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalCustomerId != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalCustomerId.Operation == OperationKind.Remove 
                            ? "externalCustomerId = NULL,"
                            : "externalCustomerId = @ExternalCustomerId,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalAccessToken != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalAccessToken.Operation == OperationKind.Remove 
                            ? "externalAccessToken = NULL,"
                            : "externalAccessToken = @ExternalAccessToken,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalRefreshToken != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalRefreshToken.Operation == OperationKind.Remove 
                            ? "externalRefreshToken = NULL,"
                            : "externalRefreshToken = @ExternalRefreshToken,"
                        );
                        operationCount++;
                    }
                    if (obj.ExternalTokenExpiry != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ExternalTokenExpiry.Operation == OperationKind.Remove 
                            ? "externalTokenExpiry = NULL,"
                            : "externalTokenExpiry = @ExternalTokenExpiry,"
                        );
                        operationCount++;
                    }
                    if (obj.ReferenceCode != null)
                    {
                        sqlPatchOperations.AppendLine(obj.ReferenceCode.Operation == OperationKind.Remove 
                            ? "referenceCode = NULL,"
                            : "referenceCode = @ReferenceCode,"
                        );
                        operationCount++;
                    }

                    var patchOperations = sqlPatchOperations.ToString();

                    if (operationCount > 0)
                    {
                        // Remove final ", " from StringBuilder to ensure query is valid
                        patchOperations = patchOperations.TrimEnd(System.Environment.NewLine.ToCharArray());
                        patchOperations = patchOperations.TrimEnd(',');
                    }

                    await con.ExecuteAsync($"UPDATE \"Company\" SET {patchOperations} WHERE companyId = @ResourceId", new {
                        ResourceId = obj.ResourceId,
                        CompanyName = (string) (obj.CompanyName == default ? default : obj.CompanyName.Value),
                        CompanyAddress = (string) (obj.CompanyAddress == default ? default : obj.CompanyAddress.Value),
                        CompanyPostcode = (string) (obj.CompanyPostcode == default ? default : obj.CompanyPostcode.Value),
                        CompanyContact = (string) (obj.CompanyContact == default ? default : obj.CompanyContact.Value),
                        CompanyPhone = (string) (obj.CompanyPhone == default ? default : obj.CompanyPhone.Value),
                        CompanyEmail = (string) (obj.CompanyEmail == default ? default : obj.CompanyEmail.Value),
                        ExternalAccountId = (string) (obj.ExternalAccountId == default ? default : obj.ExternalAccountId.Value),
                        ExternalCustomerId = (string) (obj.ExternalCustomerId == default ? default : obj.ExternalCustomerId.Value),
                        ExternalAccessToken = (string) (obj.ExternalAccessToken == default ? default : obj.ExternalAccessToken.Value),
                        ExternalRefreshToken = (string) (obj.ExternalRefreshToken == default ? default : obj.ExternalRefreshToken.Value),
                        ExternalTokenExpiry = (DateTime) (obj.ExternalTokenExpiry == default ? default : obj.ExternalTokenExpiry.Value),
                        ReferenceCode = (string) (obj.ReferenceCode == default ? default : obj.ReferenceCode.Value)
                    }).ConfigureAwait(false);

                    return Result.Ok();
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Query failed");
                return Result.Fail(ex.ToString());
            }
        }
    }
}
