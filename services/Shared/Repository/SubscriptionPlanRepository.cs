using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using CSharpFunctionalExtensions;
using Dapper;
using Koasta.Shared.Models;

// WARNING: This file is auto-generated from {repository root}/scripts/csport/generate-repositories.js.
//          Do not edit this file directly, as changes will be replaced!
//          Last generated on: Sun Jun 10 2018 18:03:14 GMT+0100

namespace Koasta.Shared.Database
{
    /*
    A repository for data access to SubscriptionPlan resources.
    */
    public partial class SubscriptionPlanRepository : RepositoryBase<SubscriptionPlan>
    {
        /// <summary>
        /// Fetches a single SubscriptionPlan
        /// </summary>
        /// <param name="companyId">The id of the company whose SubscriptionPlan you wish to fetch</param>
        /// <returns>Returns a result containing an optional item</returns>
        public async Task<Result<Maybe<FullSubscriptionPlan>>> FetchCompanySubscriptionPlan(int companyId)
        {
            try
            {
                using var con = new Npgsql.NpgsqlConnection(settings.Connection.DatabaseConnectionString);
                var lookup = new Dictionary<int, FullSubscriptionPlan>();
                var data = (await con.QueryAsync<FullSubscriptionPlan, FullSubscriptionPackage, FullSubscriptionPlan>(@"
            select SP.*, SK.* from ""SubscriptionPlan"" SP
            inner join ""SubscriptionPlanEntries"" SE
              on SE.planId = SP.planId
            inner join ""SubscriptionPackage"" SK
              on SK.packageId = SE.packageId
            where SP.companyId = @ResourceId",
                  map: (FullSubscriptionPlan plan, FullSubscriptionPackage package) =>
                  {
                      FullSubscriptionPlan curVenue;
                      if (!lookup.TryGetValue(plan.PlanId, out curVenue))
                      {
                          lookup.Add(plan.PlanId, curVenue = plan);
                      }

                      if (plan.Packages == null)
                      {
                          plan.Packages = new List<FullSubscriptionPackage>();
                      }

                      if (package != null)
                      {
                          plan.Packages.Add(package);
                      }

                      return curVenue;
                  },
                  splitOn: "tagId,imageId",
                  param: new { ResourceId = companyId }
                ).ConfigureAwait(false)).FirstOrDefault();
                if (data == null)
                {
                    return Result.Ok(Maybe<FullSubscriptionPlan>.None);
                }

                return Result.Ok(Maybe<FullSubscriptionPlan>.From(data));
            }
            catch (Exception ex)
            {
                return Result.Fail<Maybe<FullSubscriptionPlan>>(ex.ToString());
            }
        }
    }
}
